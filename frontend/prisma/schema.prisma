// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for storing user details
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions Session[]

  @@map("users")
}

// Session model for storing user sessions
model Session {
  id        String   @id @default(cuid())
  userId    String?
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  meta      Json?

  // Relations
  user         User?    @relation(fields: [userId], references: [id])
  messages     Message[]
  conversations Conversation[]

  @@map("sessions")
}

// Message model for storing individual messages
model Message {
  id        String   @id @default(cuid())
  sessionId String
  role      String   // user | assistant | system
  content   String
  createdAt DateTime @default(now())
  meta      Json?

  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Conversation model for storing conversation history with URLs
model Conversation {
  id                String   @id @default(cuid())
  sessionId         String
  userQuery         String
  aiResponse        String?
  generatedCode     String?
  sandboxUrl        String?
  generationNumber  Int      @default(1)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  meta              Json?

  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("conversations")
}